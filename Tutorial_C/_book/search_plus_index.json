{"./":{"url":"./","title":"前言","keywords":"","body":"前言 《C语言食用手册》（以下简称本书）是C语言小菜鸟ZheWana的第一个相对完整的系列教程。它所承担的职责主要有两个： 帮助编者从最开始回顾编者所掌握的关于C语言的知识，并进行系统性的梳理； 帮助读者从头开始对C语言这门编程语言建立起浅显的了解； "},"背景.html":{"url":"背景.html","title":"背景","keywords":"","body":"背景 不得不说，无论今天我们作为一个程序员站在互联网巨人的哪个部分，C语言绝对都是一个值得歌颂的伟大发明。 你我可能不用C语言来完成我们的工作，但是C语言早已经渗透在了我们计算机世界的每个角落。 C语言的历史 C语言过于耀眼，笔者尚不够资格对其品头论足，在此仅将相关的历史进行罗列供读者了解： C语言最初是为Unix系统设计出来的工具，其源于一种无类型的语言：BCPL（B语言） 1967年，马丁·理查德设计实现了BCPL语言； 1970年，肯·汤普逊为Unix设计了一个精简版的BCPL，称为B语言； 随后，在肯·汤普逊和丹尼·里奇移植Unix系统的过程中，遇到了无类型语言与不同规格数据之间的冲突问题，于是便有了最初的C语言； 1973年，Unix系统的内核正式改用C语言编写，此后，C语言逐渐开始呗广泛的应用起来，彼时的C语言还没有一个正式的标准； 1988年，美国国家标准协会（ANSI）正式将 C 语言标准化。 C语言的版本 历史上C语言存在着多个版本，一些版本到今天已经弃用，但是大部分版本到今天仍然可以看到它们的存在。 K&R C（柯里C） 1978年，丹尼斯·里奇和布莱恩·柯林汉合作出版了《C程序设计语言》的第一版，彼时的C语言尚未拥有一个正式的标准，因此书中介绍的C语言标准也被C语言程序员称作K&R C（柯里C） 此处的K&R就是取两位作者的姓名首字母结合而成。 ANSI C（C89） 1989年，C语言被美国国家标准协会（ANSI）标准化。这个版本又称为C89。标准化的一个目的是扩展K&R C，增加了一些新特性。 ISO C（C90） 1990年，国际标准化组织（ISO）成立工作组，来规定国际标准的C语言，通过对ANSI标准的少量修改，最终制定了 ISO 9899:1990，又称为C90。随后不久被ANSI所接受。 C99 《标准修正案一》在1994年为C语言建立了一个新标准，但是只修正了一些C89标准中的细节和增加更多更广的国际字符集支持。不过，这个标准引出了1999年ISO 9899:1999的发表。它通常被称为C99。C99被ANSI于2000年3月采用。 此外，该版本为目前最为流行的C版本。 C11 2011年12月8日，ISO正式发布了新的C语言的新标准C11（之前被称为C1X），官方名称为ISO/IEC 9899:2011。新的标准提高了对C++的兼容性，并增加了一些新的特性。 C18（C17） C18（也被称为为C17）是ISO/IEC 9899:2018的非正式名称，是截止到2020年6月为止最新的C语言编程标准。它于2017年编写并于2018年6月发布，被用来替代C11标准（即ISO/IEC 9899:2011）。 C18标准将被C2x标准所取代。 C2x ISO正在讨论的C语言的下一个版本，尚未知发布时间。 以上便是一系列与C语言相关的背景知识，记不住？搞不懂？没关系，因为笔者也记不住。这并不会对你接下来的学习生涯造成多么巨大的影响，你需要的是坚持这种美好的品质。 参考内容： 维基百科----C语言的历史 "},"快速上手.html":{"url":"快速上手.html","title":"快速上手","keywords":"","body":"快速上手 入门程序世界的第一件事往往是和世界打招呼，那么我们入门C语言当然也采用相同的方式。 前排提醒： 该节部分内容可能对于初学者有些超纲，别担心，慢慢就懂了。 推荐读者在阅读后面章节的时候不时回来看看😁 Hello World 笔者在这里偷偷放一个HelloWorld程序： #include int main(){ printf(\"Hello World!\"); return 0; } 代码讲解 首先我们需要知道的是：上面的代码是写在一个以.c为后缀的文本文件里面的。如何最方便的得到这样一个文件呢？ 我们只需要在任意目录新建一个文本文件，然后将其重命名为xxx.c，其中xxx的部分可以是任何名称。 接下来我们来简单的解读一下这段代码都做了什么： 使用预处理指令#include，引入了位于stdio.h文件中的内容； 参考内容：预处理、标准库 定义了主函数：main； 在主函数中调用了stdio中的printf函数，向终端输出Hello World！； 设置主函数的返回值为0； 运行过程 此处笔者简单介绍一下一个C程序在实际运行之前需要讲过的步骤：编辑、编译、链接、运行。 编辑 顾名思义，就是编辑代码内容。笔者之前也说过：C程序的代码其实就是存储在一个以.c为后缀的文本文件中的，这一步我们需要做的事就是按照C语言的语法编辑这个文本文件的内容。 编辑文本文件可以使用的工具很多，最简单的当然就是Windows自带的记事本： 但是真正的代码编写往往不使用记事本来完成，相关话题我们会在后续的开发环境小节讲述到。 编译 编译文件所用到的工具叫做编译器，而需要编译器参与编译生成可执行文件的语言往往被称为编译型语言，C语言是其中最典型的代表。 相对的，还有多种语言的执行是由解释器一边解释一边执行的，我们称其为解释型语言，最典型的代表是Python。 编译器并不是一个特指，而是一类工具的简称。显然，有许多种编译器。其中最具代表性的就是许多Linux发行版作为标准编译器的GCC以及被AppleMacOS作为标准的Clang/LLVM，而此处我们一般常用的就是GCC编译器。 C语言编译的过程大体可以分为两个步骤：预处理和汇编。 其中预处理的主要作用是带有简单选择判断机制的替换： 依照#if指令来进行一些简单的判断 替换#include指令为其所包含的目录 替换#define所声明的宏为其所定义的内容 ...... 而汇编的主要作用说的简单点其实就是把C代码翻译成汇编代码。 注：此处内容涉及计算机基础知识，没有相关基础的读者可以尝试通过这个视频合集来完善自己的相关知识基础。 别担心，每集十分钟左右，刚好适合边吃饭边消遣着观看😋 链接 我们的代码中往往有许多符号（变量、函数等），而这些符号在使用的其实仅仅是一个符号而已，链接过程所做的事其实就是把这些普通的符号和他们的定义链接到一起，以便它们有自己的意义。 链接的工作往往由链接器来完成。 链接后的最终结果就是生成了可执行程序（.exe），接着就可以运行程序了。 开发环境 上面笔者提到了真正的代码编辑往往并不会使用记事本来进行，下面我们就来仔细聊聊C语言的开发环境。 常规的开发为了方便，我们一般使用集成开发环境（IDE，Integrated Development Environment）。IDE往往将我们上述提到的工具（编译器、链接器）集成到一起进行统一安装和管理，此外还带有一定的编辑文件以及方便软件开发的其他功能（例如代码高亮、代码补全、快速重构等）。 由于C++与C语言的密切关系，所以我们往往将C与C++相提并论，常用的C/C++集成开发环境有： 由微软推出的Visual Studio（简称VS） 由JetBrains推出的Clion 由BloodshedSoftware推出的Dev-C++ 部分学校的教学中使用的是老旧的VS2010版本，如果读者希望使用VS进行开发的话，建议使用微软每年在官网发布的最新社区版本（笔者落笔时最新版本为VS2022），网络上相关安装教程泛滥，恕笔者此处不再给出单独的安装教程。 笔者此处抱着一种夹带私货的态度，推荐读者使用Clion进行C语言的开发学习。 此外，既然已经决定开始学习编程，笔者同样推荐读者去看看笔者之前曾写过的一篇文章：编程Q&A—-环境&Tips，看不懂没关系，过段时间回来说不定就可以看懂了（doge 以上就是快速上手C语言相关的一些知识，还是那句话：没看懂没关系，看个热闹嘛，毕竟慢慢就懂了😋 "},"概念术语.html":{"url":"概念术语.html","title":"概念术语","keywords":"","body":"概念术语 ？？？ "},"数据类型.html":{"url":"数据类型.html","title":"数据类型","keywords":"","body":"数据类型 "},"变量与常量.html":{"url":"变量与常量.html","title":"变量与常量","keywords":"","body":"变量与常量 "},"运算符.html":{"url":"运算符.html","title":"运算符","keywords":"","body":"运算符 "},"逻辑控制/":{"url":"逻辑控制/","title":"逻辑控制","keywords":"","body":"逻辑控制 "},"逻辑控制/分支控制.html":{"url":"逻辑控制/分支控制.html","title":"分支控制","keywords":"","body":"分支控制 "},"逻辑控制/循环控制.html":{"url":"逻辑控制/循环控制.html","title":"循环控制","keywords":"","body":"循环控制 "},"逻辑控制/自由控制.html":{"url":"逻辑控制/自由控制.html","title":"自由控制","keywords":"","body":"自由控制 "},"内容封装/":{"url":"内容封装/","title":"内容封装","keywords":"","body":"内容封装 "},"内容封装/数据封装.html":{"url":"内容封装/数据封装.html","title":"数据封装","keywords":"","body":"数据封装 "},"内容封装/字符封装.html":{"url":"内容封装/字符封装.html","title":"字符封装","keywords":"","body":"字符封装 "},"内容封装/操作封装.html":{"url":"内容封装/操作封装.html","title":"操作封装","keywords":"","body":"操作封装 "},"引用与链接.html":{"url":"引用与链接.html","title":"引用与链接","keywords":"","body":"引用与链接 "},"预处理.html":{"url":"预处理.html","title":"预处理","keywords":"","body":"预处理 "},"内存模型.html":{"url":"内存模型.html","title":"内存模型","keywords":"","body":"内存模型 "},"标准库.html":{"url":"标准库.html","title":"标准库","keywords":"","body":"标准库 "}}