{"./":{"url":"./","title":"前言","keywords":"","body":"前言 你，知道版本控制吗？ 如果你没有在深夜因为甲方连续更改了16个版本最终却定稿第1版而血压飙升过；如果你没有经历过因为电脑中了病毒导致文件丢失，原本迭代了许久的文件只能从头再来；如果你没有经历过为代码开发新功能的过程中同事突然向你索要未开始开发前的版本的绝望...... 如果你没经历过这些如果，那么恭喜你，你以一种十分令人羡慕的幸运度过了你之前的人生。另外，很遗憾，你没有机会意识到版本管理的重要性，在你的余生中还有许多版本劫需要度过。 不过还是要恭喜你，因为这个教程以及它的主角Git将是帮助你度过未来版本劫的利器。 Git是一个版本管理工具，它的作者是开发界的传奇人物Linus Torvalds，开发的缘由在互联网上已经称为经典咏流传，笔者在此便不赘述，我们将目光更多的放在Git工具的本质上。 笔者自己就是因为经历了上面的版本劫之后才开始使用Git的，到了现在，Git几乎已经成为了笔者开发过程中必备的工具软件。笔者撰写这篇教程的初衷其实很简单：帮助读者从多个方面更好的理解Git。 需要强调的是：笔者曾阅读过许多Git教程，他们的专业性都极强，讲解透彻，实际看下来会让Git的实际使用者收获颇丰，但是初出茅庐的小白看到这些专业术语和命令行是真的头大。于是笔者在撰写这篇教程时，会主观弱化一部分内容，包括但不限于： git基于命令行的操作 复杂的git命令 高阶的git应用 ...... 那么就让我们开始吧。 "},"从宏观理解Git/":{"url":"从宏观理解Git/","title":"从宏观理解Git","keywords":"","body":"从宏观理解Git "},"从宏观理解Git/工作区、暂存区与版本库.html":{"url":"从宏观理解Git/工作区、暂存区与版本库.html","title":"工作区、暂存区与版本库","keywords":"","body":"工作区、暂存区与版本库 "},"从宏观理解Git/分支、差异与冲突.html":{"url":"从宏观理解Git/分支、差异与冲突.html","title":"分支、差异与冲突","keywords":"","body":"分支、差异与冲突 "},"在工作场景中理解Git.html":{"url":"在工作场景中理解Git.html","title":"在工作场景中理解Git","keywords":"","body":"在工作场景中理解Git "},"在实际使用中理解Git.html":{"url":"在实际使用中理解Git.html","title":"在实际使用中理解Git","keywords":"","body":"在实际使用中理解Git "},"当在线Git服务加入你的工作流.html":{"url":"当在线Git服务加入你的工作流.html","title":"当在线Git服务加入你的工作流","keywords":"","body":"当在线Git服务加入你的工作流 "}}