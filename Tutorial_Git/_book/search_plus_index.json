<<<<<<< HEAD
{"./":{"url":"./","title":"前言","keywords":"","body":"Introduction "}}
=======
{"./":{"url":"./","title":"前言","keywords":"","body":"前言 你，知道版本控制吗？ 如果你没有在深夜因为甲方连续更改了16个版本最终却定稿第1版而血压飙升过；如果你没有经历过因为电脑中了病毒导致文件丢失，原本迭代了许久的文件只能从头再来；如果你没有经历过为代码开发新功能的过程中同事突然向你索要未开始开发前的版本的绝望...... 如果你没经历过这些如果，那么恭喜你，你以一种十分令人羡慕的幸运度过了你之前的人生。另外，很遗憾，你没有机会意识到版本管理的重要性，在你的余生中还有许多版本劫需要度过。 不过还是要恭喜你，因为这个教程以及它的主角Git将是帮助你度过未来版本劫的利器。 Git是一个版本管理工具，它的作者是开发界的传奇人物Linus Torvalds，开发的缘由在互联网上已经称为经典咏流传，笔者在此便不赘述，我们将目光更多的放在Git工具的本质上。 笔者自己就是因为经历了上面的版本劫之后才开始使用Git的，到了现在，Git几乎已经成为了笔者开发过程中必备的工具软件。笔者撰写这篇教程的初衷其实很简单：帮助读者从多个方面更好的理解Git。 需要强调的是：笔者曾阅读过许多Git教程，他们的专业性都极强，讲解透彻，实际看下来会让Git的实际使用者收获颇丰，但是初出茅庐的小白看到这些专业术语和命令行是真的头大。于是笔者在撰写这篇教程时，会主观弱化一部分内容，包括但不限于： git基于命令行的操作 复杂的git命令 高阶的git应用 ...... 那么就让我们开始吧。 "},"从宏观理解Git/":{"url":"从宏观理解Git/","title":"从宏观理解Git","keywords":"","body":"从宏观理解Git 提前说明：本章内容主要是一些理论的科普。尽管笔者深知理论是十分枯燥且难以接受的，但是读者仍然需要一些前置知识来理解一些Git世界中“人尽皆知”的概念。 事实上，大部分概念读者只需要眼熟即可，在后续章节中笔者会列举一些例子来帮助读者理解这些概念。 "},"从宏观理解Git/工作区、暂存区与版本库.html":{"url":"从宏观理解Git/工作区、暂存区与版本库.html","title":"工作区、暂存区与版本库","keywords":"","body":"工作区、暂存区与版本库 本节中，笔者会为读者简单介绍一下Git中最基本的概念：仓库、版本库、工作区以及暂存区，并且力求让读者有一个初步的理解。 一些简单的概念 Git是一个分布式版本管理系统，所谓分布式是指在使用同一仓库的每一台电脑中都有一个完整的版本库。 上面提到的仓库，是Git管理文件的一个单位；换句话说，Git以一个仓库为单位进行版本管理。实际上，一个仓库就是一个文件夹，在这个文件夹下的所有文件都被Git所管理（当然有一些例外情况，不过现在不用理会）。 上面提到的版本库，顾名思义就是记录了Git仓库中的文件的版本信息的地方。你对文件所做的一切（新建文件、修改文件、删除文件）都会被记录在版本库中。实际上，版本库也是一个文件夹，而且是一个固定在仓库目录下的名为.git的文件夹。你可能看不到它，因为它往往是一个隐藏文件夹，需要在你使用的操作系统中做出对应的特殊处理才能看到。 仓库中除了版本库（.git文件夹）之外，其余的文件和文件夹都属于工作区，Git会记录工作区中所有文件的变化。 当你修改工作区中的文件时，Git会把你对文件的修改作为差异检测出来，但是并不做任何操作，你需要通过使用指令来将修改后的差异保存到暂存区，进而提交保存进版本库中。 对应概念与指令 上述过程其实涉及到一些Git指令的操作，我们来将一些概念和指令做一个简单的对应： 如果读者知道笔者接下来在说些什么，那么大可以自己在命令行中简单练手试一下，不知道笔者在讲什么也没关系，本教程的重点并不在此。 首先，要想将一个文件夹中的文件纳入版本管理，你需要建立一个Git版本库，而建立版本库的方法很简单：在仓库目录下执行指令git init即可初始化一个版本库； 现在你拥有了一个仓库（整个文件夹）、一个版本库（文件夹中的.git文件夹以及其中的内容）和一个工作区（文件夹中除了.git文件夹以外的一切），你可以尝试修改工作区中的文件，git会记录这些差异。记得吗？你需要将这些差异添加到暂存区，然后提交保存进版本库中，那么怎么做呢： 你可以使用git add指令来将文件中的差异添加到暂存区中 之后你可以使用git commit指令来将已经在暂存区中的差异提交到版本库中 完成了上述步骤之后你就完成了对一次文件更改的版本管理。 PS：对于上述内容，读者仅需对整个版本的管理流程有一个大致的理解即可，在后续的章节中，笔者会通过场景案例帮助读者对版本管理中的流程和功能有一个更加深刻的认知。 "},"从宏观理解Git/分支与差异.html":{"url":"从宏观理解Git/分支与差异.html","title":"分支与差异","keywords":"","body":"分支与差异 本节中，笔者会继续为读者科普一些Git的基础概念，包括但不限于：分支和差异。 加加减减中看差异 在上一节中，笔者已经提到过差异这个词汇，但是应该如何理解差异呢？ 实际上，在Git中，是以文件中的行为最小单位来进行管理的，在Git中所谓的差异就是指行内容的增减。举一个简单的例子：当笔者将一行中的某个词汇改变之后，运行git diff指令即可获悉当前工作区中所产生的差异，如下图所示。 可以看到，虽然我们只是修改了一个词语，但是在Git的视角中，是我们删除了第一行而添加了第二行。类似这样的文件内容的变化就是我们所说的差异。 需要强调的是：差异是指工作区中当前文件与版本库中记录的版本之间的差异。当你将文件中的差异添加到暂存区之后，该部分内容就已经被纳入了版本库的管理之中，尽管你并没有进行提交，这部分内容也不会被算在差异之中。 版本发展中看分支 分支其实是一个很形象的概念，就是指在版本的发展过程中的某个节点开始，新版本会向多个不同的方向发展，那么这些方向就理所当然的被认为是几个分支。举个形象一点的例子： 想象你正在画一幅人像画，首先你完成了一个简单的线稿，这是一个妥妥的线性流程： 但是当你给线稿上色的时候，你忽然想尝试一些不同的尝试，于是你尝试了红、黄、蓝、绿四种颜色的头发： 于是你的画稿实际上的版本发展就是这样子的： 其中每个箭头都代表一个版本的变化。显然，在你给头发上色的过程中产生了四个分支，这四个分支相互独立，又都基于产生分支前的最后一个版本。 产生分支后，各个分支之间互相独立，互不影响。而各个分支所基于的版本线则会被复制成完全相同的四份，所以即使在其中一个分支中修改发生分支之前就已经存在的内容，对其他分支依然不会造成影响。 对应概念与指令 与上一节一样，我们来将概念与指令做一个简单的对应： 你可以使用git diff指令来获取当前工作区中的差异 分支相关的指令比较复杂，我们之后再说 "},"在工作场景中理解Git.html":{"url":"在工作场景中理解Git.html","title":"在工作场景中理解Git","keywords":"","body":"在工作场景中理解Git "},"在实际使用中理解Git.html":{"url":"在实际使用中理解Git.html","title":"在实际使用中理解Git","keywords":"","body":"在实际使用中理解Git "},"当在线Git服务加入你的工作流.html":{"url":"当在线Git服务加入你的工作流.html","title":"当在线Git服务加入你的工作流","keywords":"","body":"当在线Git服务加入你的工作流 "}}
>>>>>>> 9a990012b08adfb2e21a643e8c33b17d899bf945
